{"version":3,"sources":["../src/index.ts","../src/utils.ts","../src/vanilla.ts"],"sourcesContent":["import type { PiniaPluginContext } from 'pinia'\nimport type { Options } from './vanilla'\nimport { BroadcastChannel as BroadcastChannelImpl } from 'broadcast-channel'\nimport { serialize } from './utils'\n\nfunction stateHasKey(key: string, $state: PiniaPluginContext['store']['$state']) {\n  return Object.keys($state).includes(key)\n}\n\n/**\n * Adds a `share` option to your store to share state across browser tabs.\n *\n * @example\n *\n * ```ts\n * import { PiniaSharedState } from 'pinia-shared-state'\n *\n * // Pass the plugin to your application's pinia plugin\n * pinia.use(PiniaSharedState({ enable: true, initialize: false, type: 'localstorage' }))\n * ```\n *\n * @param options - Global plugin options.\n * @param options.enable - Enable/disable sharing of state for all stores.\n * @param options.initialize - Immediately recover the shared state from another tab.\n * @param options.type - 'native', 'idb', 'localstorage', 'node'.\n * @param options.serializer - Custom serializer to serialize store state before broadcasting.\n */\nexport function PiniaSharedState({\n  enable = true,\n  initialize = true,\n  type,\n  serializer,\n}: Options & { enable?: boolean }) {\n  return ({ store, options }: PiniaPluginContext) => {\n    const isEnabled = options?.share?.enable ?? enable\n    const omittedKeys = options?.share?.omit ?? []\n    if (!isEnabled)\n      return\n\n    const channel = new BroadcastChannelImpl(store.$id, {\n      type,\n    })\n\n    let timestamp = 0\n    let externalUpdate = false\n\n    const keysToUpdate = Object.keys(store.$state).filter(key => !omittedKeys.includes(key) && stateHasKey(key, store.$state))\n\n    channel.onmessage = (newState) => {\n      if (newState === undefined) {\n        channel.postMessage({\n          timestamp,\n          state: serialize(store.$state, serializer),\n        })\n        return\n      }\n\n      if (newState.timestamp <= timestamp)\n        return\n\n      externalUpdate = true\n      timestamp = newState.timestamp\n\n      const deserializedState = serializer?.deserialize(newState.serializedState);\n\n      store.$patch((state) => {\n        keysToUpdate.forEach((key) => {\n          state[key] = deserializedState[key]\n        })\n      })\n    }\n\n    const shouldInitialize = options?.share?.initialize ?? initialize\n    if (shouldInitialize)\n      channel.postMessage(undefined)\n\n    store.$subscribe((_, state) => {\n      if (!externalUpdate) {\n        timestamp = Date.now()\n        channel.postMessage({\n          timestamp,\n          state: serialize(state, serializer),\n        })\n      }\n      externalUpdate = false\n    })\n  }\n}\n\nexport { share } from './vanilla'\n\ndeclare module 'pinia' {\n  // eslint-disable-next-line unused-imports/no-unused-vars\n  export interface DefineStoreOptionsBase<S, Store> {\n    /**\n     * Override global config.\n     *\n     * @example\n     *\n     * ```js\n     * defineStore({\n     *   id: 'counter',\n     *   state: () => ({ count: 0, name: 'John Doe' })\n     *   share: {\n     *     // An array of fields that the plugin will ignore.\n     *     omit: ['name'],\n     *     // Enable/disable sharing of state for this store.\n     *     enable: false\n     *     // If set to true this tab tries to immediately recover the\n     *     // shared state from another tab. Defaults to true.\n     *     initialize: false\n     *     // Serialize store state before broadcasting. Defaults to `JSON.stringify`/`JSON.parse`.\n     *     serializer: {\n     *      serialize: JSON.stringify\n     *      deserialize: JSON.parse\n     *     }\n     *   }\n     * })\n     * ```\n     */\n    share?: {\n      omit?: Array<keyof S>\n      enable?: boolean\n      initialize?: boolean\n    }\n  }\n}\n","export interface Serializer {\n  serialize: (value: any) => string\n  deserialize: (value: string) => any\n}\n\nexport function serialize(\n  obj: Record<string, unknown>,\n  serializer: Serializer = { serialize: JSON.stringify, deserialize: JSON.parse },\n) {\n  return serializer.serialize(obj);\n}\n","import type { MethodType } from 'broadcast-channel'\nimport type { Store } from 'pinia'\nimport type { Serializer } from './utils'\nimport { BroadcastChannel as BroadcastChannelImpl } from 'broadcast-channel'\nimport { serialize } from './utils'\n\nexport interface Options {\n  initialize?: boolean\n  type?: MethodType\n  serializer?: Serializer\n}\n\n/**\n * Share state across browser tabs.\n *\n * @example\n *\n * ```ts\n * import useStore from './store'\n *\n * const counterStore = useStore()\n *\n * share('counter', counterStore, { initialize: true })\n * ```\n *\n * @param key - A property of a store state.\n * @param store - The store the plugin will augment.\n * @param options - Share state options.\n * @param options.initialize - Immediately recover the shared state from another tab.\n * @param options.type - 'native', 'idb', 'localstorage', 'node'.\n * @param options.serializer - Custom serializer to serialize state before broadcasting.\n */\nexport function share<T extends Store, K extends keyof T['$state']>(\n  key: K,\n  store: T,\n  { initialize, serializer, type }: Options,\n): { sync: () => void, unshare: () => void } {\n  const channelName = `${store.$id}-${key.toString()}`\n\n  const channel = new BroadcastChannelImpl(channelName, {\n    type,\n  })\n  let externalUpdate = false\n  let timestamp = 0\n\n  store.$subscribe((_, state) => {\n    if (!externalUpdate) {\n      timestamp = Date.now()\n      channel.postMessage({\n        timestamp,\n        newValue: serialize(state, serializer)[key as number],\n      })\n    }\n    externalUpdate = false\n  })\n\n  channel.onmessage = (evt) => {\n    if (evt === undefined) {\n      channel.postMessage({\n        timestamp,\n        // @ts-expect-error: TODO\n        newValue: serialize(store.$state, serializer)[key],\n      })\n      return\n    }\n    if (evt.timestamp <= timestamp)\n      return\n\n    externalUpdate = true\n    timestamp = evt.timestamp\n    store[key] = evt.newValue\n  }\n\n  const sync = () => channel.postMessage(undefined)\n  const unshare = () => {\n    return channel.close()\n  }\n\n  if (initialize)\n    sync()\n\n  return { sync, unshare }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,IAAAA,4BAAyD;;;ACGlD,SAAS,UACd,KACA,aAAyB,EAAE,WAAW,KAAK,WAAW,aAAa,KAAK,MAAM,GAC9E;AACA,SAAO,WAAW,UAAU,GAAG;AACjC;;;ACPA,+BAAyD;AA6BlD,SAAS,MACd,KACA,OACA,EAAE,YAAY,YAAY,KAAK,GACY;AAC3C,QAAM,cAAc,GAAG,MAAM,GAAG,IAAI,IAAI,SAAS,CAAC;AAElD,QAAM,UAAU,IAAI,yBAAAC,iBAAqB,aAAa;AAAA,IACpD;AAAA,EACF,CAAC;AACD,MAAI,iBAAiB;AACrB,MAAI,YAAY;AAEhB,QAAM,WAAW,CAAC,GAAG,UAAU;AAC7B,QAAI,CAAC,gBAAgB;AACnB,kBAAY,KAAK,IAAI;AACrB,cAAQ,YAAY;AAAA,QAClB;AAAA,QACA,UAAU,UAAU,OAAO,UAAU,EAAE,GAAa;AAAA,MACtD,CAAC;AAAA,IACH;AACA,qBAAiB;AAAA,EACnB,CAAC;AAED,UAAQ,YAAY,CAAC,QAAQ;AAC3B,QAAI,QAAQ,QAAW;AACrB,cAAQ,YAAY;AAAA,QAClB;AAAA;AAAA,QAEA,UAAU,UAAU,MAAM,QAAQ,UAAU,EAAE,GAAG;AAAA,MACnD,CAAC;AACD;AAAA,IACF;AACA,QAAI,IAAI,aAAa;AACnB;AAEF,qBAAiB;AACjB,gBAAY,IAAI;AAChB,UAAM,GAAG,IAAI,IAAI;AAAA,EACnB;AAEA,QAAM,OAAO,MAAM,QAAQ,YAAY,MAAS;AAChD,QAAM,UAAU,MAAM;AACpB,WAAO,QAAQ,MAAM;AAAA,EACvB;AAEA,MAAI;AACF,SAAK;AAEP,SAAO,EAAE,MAAM,QAAQ;AACzB;;;AF7EA,SAAS,YAAY,KAAa,QAA+C;AAC/E,SAAO,OAAO,KAAK,MAAM,EAAE,SAAS,GAAG;AACzC;AAoBO,SAAS,iBAAiB;AAAA,EAC/B,SAAS;AAAA,EACT,aAAa;AAAA,EACb;AAAA,EACA;AACF,GAAmC;AACjC,SAAO,CAAC,EAAE,OAAO,QAAQ,MAA0B;AACjD,UAAM,YAAY,SAAS,OAAO,UAAU;AAC5C,UAAM,cAAc,SAAS,OAAO,QAAQ,CAAC;AAC7C,QAAI,CAAC;AACH;AAEF,UAAM,UAAU,IAAI,0BAAAC,iBAAqB,MAAM,KAAK;AAAA,MAClD;AAAA,IACF,CAAC;AAED,QAAI,YAAY;AAChB,QAAI,iBAAiB;AAErB,UAAM,eAAe,OAAO,KAAK,MAAM,MAAM,EAAE,OAAO,SAAO,CAAC,YAAY,SAAS,GAAG,KAAK,YAAY,KAAK,MAAM,MAAM,CAAC;AAEzH,YAAQ,YAAY,CAAC,aAAa;AAChC,UAAI,aAAa,QAAW;AAC1B,gBAAQ,YAAY;AAAA,UAClB;AAAA,UACA,OAAO,UAAU,MAAM,QAAQ,UAAU;AAAA,QAC3C,CAAC;AACD;AAAA,MACF;AAEA,UAAI,SAAS,aAAa;AACxB;AAEF,uBAAiB;AACjB,kBAAY,SAAS;AAErB,YAAM,oBAAoB,YAAY,YAAY,SAAS,eAAe;AAE1E,YAAM,OAAO,CAAC,UAAU;AACtB,qBAAa,QAAQ,CAAC,QAAQ;AAC5B,gBAAM,GAAG,IAAI,kBAAkB,GAAG;AAAA,QACpC,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAEA,UAAM,mBAAmB,SAAS,OAAO,cAAc;AACvD,QAAI;AACF,cAAQ,YAAY,MAAS;AAE/B,UAAM,WAAW,CAAC,GAAG,UAAU;AAC7B,UAAI,CAAC,gBAAgB;AACnB,oBAAY,KAAK,IAAI;AACrB,gBAAQ,YAAY;AAAA,UAClB;AAAA,UACA,OAAO,UAAU,OAAO,UAAU;AAAA,QACpC,CAAC;AAAA,MACH;AACA,uBAAiB;AAAA,IACnB,CAAC;AAAA,EACH;AACF;","names":["import_broadcast_channel","BroadcastChannelImpl","BroadcastChannelImpl"]}